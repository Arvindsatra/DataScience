--1) Display number of states present in location table?

select count(distinct state) as NumOfStates from location

--2) How many products are of regular type ?
select count(*) as RegularProductsCount
from Product
where type = 'Regular'

--3) How much spending has been done on marketing of product id 1
select sum(Marketing) MarketingExpenses 
from fact
where ProductId = 1

--4) What is the minimum sales of a product ?
select p.Product, min(f.Sales) as MinSales 
from fact f
join Product p on f.ProductId = p.ProductId
group by p.Product
order by p.Product

--5) Display max Cost of Good Sold(COGS).
select max(COGS)MaxCOGS from fact

--6) Display the Details of the productid where product type is coffee
select * from Product
where Product_Type = 'Coffee'

--7) Display the details where total_expenses is greater than 40.
select * from fact
where Total_Expenses = 40

--8) What is the average sales in Area_Code 719 ?
select avg(Sales)average_sales from fact
where Area_Code = 719

--9) Find out the total profit generated by Colorado state.
select sum(Profit) Total_Profit from fact
where Area_Code 
in (select Area_Code from Location
where State = 'Colorado')

--10) Display the average inventory for each product id.
select ProductId, avg(Inventory)average_inventory from fact
group by ProductId
order by ProductId 

--11) Display state in a sequential order in a location table.
select distinct State from Location
order by State

--12) Display the average budget margin where average budget margin 
--should be greater than 100
select avg(Budget_Margin) as Avg_Budget_Margin 
from fact
group by ProductId
having avg(Budget_Margin) > 100
order by ProductId

--13) What is the total sales done on date 2010-01-01
select sum(Sales) total_sales
from fact
where Date = '2010-01-01'

--14) Display the average total expense of each product id on individual date
select ProductId, Date, avg(Total_Expenses) Avg_Total_Expenses
from fact
group by ProductId, Date
order by ProductId, Date

--15) Display the table with the following attributes such as
--Date, productid, product_type, product, Sales, profit, state, area_code
select 
f.Date, 
f.ProductId, 
p.Product_type, 
p.Product, 
f.Sales, 
f.Profit,
l.State, 
l.Area_Code
from Product p
join fact f on  p.ProductId = f.ProductId
join Location l on f.Area_Code = l.Area_Code

--16) Display the rank without any gap to show the Sales wise rank.
select 
f.Date, 
f.ProductId, 
p.Product_type, 
p.Product, 
f.Sales, 
f.Profit,
l.State, 
l.Area_Code,
rank() over (order by Sales desc) as Sales_Rank
from Product p
join fact f on  p.ProductId = f.ProductId
join Location l on f.Area_Code = l.Area_Code


--17) Find the State wise Profit and Sales.
select l.State, sum(f.Profit)TotalPft, sum(f.Sales)TotalSales from fact f
join Location l on f.Area_Code = l.Area_Code
group by l.State

--18) Find the State wise Profit and Sales along with the Product Name.
select p.Product, l.State, sum(f.Profit)TotalPft, sum(f.Sales)TotalSales from Location l
join fact f on l.Area_Code = f.Area_Code
join Product p on f.ProductId = p.ProductId
group by l.State, p.Product


--19) If there is an increase in sales of 5%. Calculate the increased sales.
select Sales-Budget_Sales as Increase_Sales, * 
from fact
where Sales >= 1.05 * Budget_Sales

--20) Find the maximum profit along with the Product id and Product Type.
select p.ProductId, p.Product_Type, Max(f.Profit) Max_Pft from fact f
join Product p on f.ProductId = p.ProductId
group by p.ProductId, p.Product_Type


--21) Create a Stored Procedure to fetch the result according to the product type
--from Product.
create procedure GetProduct @Product_Type varchar(50)
as 
begin
	select * from Product where Product_Type = @Product_Type
end

exec GetProduct 'Coffee'

--22) Write a query by creating a condition in which if the total expenses 
--is less than 60 then it is a profit or else loss.
select 
case
	when Total_Expenses <60 then 'Profit'
	else 'Loss'
end as Result,
 Total_Expenses from fact

--23) Give the total weekly sales value with the Date and productid details. 
--Use roll-up to pull the data in hierarchical order.
select ISNULL(CONVERT(VARCHAR, Date, 23), 'Grand total') as Weekly, ProductId, Sum(Sales) as Total_Sales
from fact
group by rollup(Date), ProductId
order by Weekly, ProductId

--24) Apply union and intersection operator on the tables which consist 
--of attribute area code.
SELECT Area_Code
FROM fact
UNION
SELECT Area_Code
FROM Location;

SELECT Area_Code
FROM fact
INTERSECT
SELECT Area_Code
FROM Location;

--25) Create a user-defined function for the product table to fetch a
--particular product type based upon the user’s preference.
create function GetProducts 
(
@ProductType varchar(50)
)
returns table
as
return
(
select *
from Product
where Product_Type = @ProductType
)

select * from GetProducts('Coffee')


--26) Change the product type from coffee to tea where product id is 1 and undo it.
begin transaction 
update product
set Product_Type = 'Tea'
where productId = 1 and Product_Type = 'Coffee'

rollback transaction

select * from product

--27) Display the Date, productid and sales where total expenses are between
--100 to 200.
select date, ProductId, Sales,Total_Expenses from fact
where Total_Expenses between 100 and 200

--28) Delete the records in the product table for regular type.
delete from Product
where Type = 'Regular'

--29) Display the ASCII value of the fifth character from the column product.
SELECT ASCII(SUBSTRING(Product, 5, 1)) AS ASCII_Value
FROM Product;
 